components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Post:
      type: object
      properties:
        id:
          type: string
        bio:
          type: string
        imageUrl:
          type: string
        postedBy:
          type: string
      example:
        id: 5ebac534954b54139806c112
        bio: fake post
        imageUrl: http://localhost:4000/files/sample-picture.jpg
        postedBy: 4gbac534954b54139806c999

    Like:
      type: object
      properties:
        postId:
          type: string
          description: Post ID of post
        userId:
          type: string
          description: User ID of liker
      example:
        postId: '8de7vadsnj12j33j1ioas21dsg'
        userId: '13nkadsnj12j33j1ioasdkl'

    Message:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        from:
          type: string
        senderChatID:
          type: string
        type:
          type: string
      example:
        id: 5ebbc534954b54139706d913
        text: hello
        from: fake name
        senderChatID: 5rebc534954b54139706d920
        receiverChatID: 5rebc534954b54139706d943
        type: text

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
